x.m = 1;
    a1.p.b = 1;
    a1.p.n = 1;
    a1.p.dig = {3};
    a1.q.n = 1;
    a1.q.dig = {6};
    a2.p.b = 1;
    a2.p.n = 1;
    a2.p.dig = {1};
    a2.q.n = 1;
    a2.q.dig = {1};
    x.C = {a2, a1};
    res.p.b = 1;
    res.p.n = 1;
    res.p.dig = {1};
    res.q.n = 1;
    res.q.dig = {2};
    Frac c = LED_P_Q(x);
    DO_CHECK(LED_P_Q(x) == res);


x.m = 2;
    a1.p.b = 0;
    a1.p.n = 1;
    a1.p.dig = {2};
    a1.q.n = 1;
    a1.q.dig = {3};
    a2.p.b = 0;
    a2.p.n = 1;
    a2.p.dig = {1};
    a2.q.n = 1;
    a2.q.dig = {3};
    a3.p.b = 0;
    a3.p.n = 1;
    a3.p.dig = {1};
    a3.q.n = 1;
    a3.q.dig = {1};
    x.C = {a3, a2, a1};
    y.m = 2;
    b1.p.b = 0;
    b1.p.n = 1;
    b1.p.dig = {3};
    b1.q.n = 1;
    b1.q.dig = {1};
    b2.p.b = 1;
    b2.p.n = 1;
    b2.p.dig = {3};
    b2.q.n = 1;
    b2.q.dig = {1};
    b3.p.b = 1;
    b3.p.n = 1;
    b3.p.dig = {2};
    b3.q.n = 1;
    b3.q.dig = {1};
    y.C = {b3, b2, b1};
    res.m = 4;
    res1.p.b = 0;
    res1.p.n = 1;
    res1.p.dig = {2};
    res1.q.n = 1;
    res1.q.dig = {1};
    res2.p.b = 1;
    res2.p.n = 1;
    res2.p.dig = {1};
    res2.q.n = 1;
    res2.q.dig = {1};
    res3.p.b = 0;
    res3.p.n = 1;
    res3.p.dig = {2};
    res3.q.n = 1;
    res3.q.dig = {3};
    res4.p.b = 1;
    res4.p.n = 2;
    res4.p.dig = {1,1};
    res4.q.n = 1;
    res4.q.dig = {3};
    res5.p.b = 1;
    res5.p.n = 1;
    res5.p.dig = {2};
    res5.q.n = 1;
    res5.q.dig = {1};
    res.C = {res5, res4, res3,res2,res1};
    std::cout << write_Poly(x) << std::endl;
    std::cout << write_Poly(y) << std::endl;
    std::cout << write_Poly(res) << std::endl;
    std::cout << write_Poly(MUL_PP_P(x, y)) << std::endl;
    DO_CHECK(MUL_PP_P(x, y) == res);

(2)/(3) x^2 + (1)/(3) x^1 + (1)/(1) x^0
(3)/(1) x^2 + (-3)/(1) x^1 + (-2)/(1) x^0
(2)/(1) x^4 + (-1)/(1) x^3 + (2)/(3) x^2 + (-11)/(3) x^1 + (-2)/(1) x^0
(2)/(3) x^4 + (1)/(1) x^3 + (0)/(1) x^2 + (1)/(3) x^1 + (-2)/(1) x^0



x.m = 2;
    a1.p.b = 0;
    a1.p.n = 1;
    a1.p.dig = {1};
    a1.q.n = 1;
    a1.q.dig = {1};
    a2.p.b = 0;
    a2.p.n = 1;
    a2.p.dig = {2};
    a2.q.n = 1;
    a2.q.dig = {1};
    a3.p.b = 0;
    a3.p.n = 1;
    a3.p.dig = {3};
    a3.q.n = 1;
    a3.q.dig = {1};
    x.C = {a3, a2, a1};
    y.m = 1;
    b1.p.b = 0;
    b1.p.n = 1;
    b1.p.dig = {1};
    b1.q.n = 1;
    b1.q.dig = {1};
    b2.p.b = 0;
    b2.p.n = 1;
    b2.p.dig = {0};
    b2.q.n = 1;
    b2.q.dig = {1};
    y.C = {b2,b1};
    res.m = 3;
    res1.p.b = 0;
    res1.p.n = 1;
    res1.p.dig = {1};
    res1.q.n = 1;
    res1.q.dig = {1};
    res2.p.b = 0;
    res2.p.n = 1;
    res2.p.dig = {2};
    res2.q.n = 1;
    res2.q.dig = {1};
    res3.p.b = 0;
    res3.p.n = 1;
    res3.p.dig = {3};
    res3.q.n = 1;
    res3.q.dig = {1};
    res4.p.b = 0;
    res4.p.n = 1;
    res4.p.dig = {0};
    res4.q.n = 1;
    res4.q.dig = {1};
    res.C = {res4,res3,res2,res1};
    std::cout << write_Poly(x) << std::endl;
    std::cout << write_Poly(y) << std::endl;
    std::cout << write_Poly(res) << std::endl;
    std::cout << write_Poly(MUL_PP_P(x, y)) << std::endl;
    DO_CHECK(MUL_PP_P(x, y) == res);

(1)/(1) x^2 + (2)/(1) x^1 + (3)/(1) x^0
(1)/(1) x^1 + (0)/(1) x^0
(1)/(1) x^3 + (2)/(1) x^2 + (3)/(1) x^1 + (0)/(1) x^0
(1)/(1) x^3 + (3)/(1) x^2 + (5)/(1) x^1 + (3)/(1) x^0


x.m = 2;
    a1.p.b = 0;
    a1.p.n = 1;
    a1.p.dig = {1};
    a1.q.n = 1;
    a1.q.dig = {1};
    a2.p.b = 0;
    a2.p.n = 1;
    a2.p.dig = {2};
    a2.q.n = 1;
    a2.q.dig = {1};
    a3.p.b = 0;
    a3.p.n = 1;
    a3.p.dig = {3};
    a3.q.n = 1;
    a3.q.dig = {1};
    x.C = {a3, a2, a1};
    y.m = 1;
    b1.p.b = 0;
    b1.p.n = 1;
    b1.p.dig = {2};
    b1.q.n = 1;
    b1.q.dig = {1};
    b2.p.b = 0;
    b2.p.n = 1;
    b2.p.dig = {0};
    b2.q.n = 1;
    b2.q.dig = {1};
    y.C = {b2,b1};
    res.m = 3;
    res1.p.b = 0;
    res1.p.n = 1;
    res1.p.dig = {2};
    res1.q.n = 1;
    res1.q.dig = {1};
    res2.p.b = 0;
    res2.p.n = 1;
    res2.p.dig = {4};
    res2.q.n = 1;
    res2.q.dig = {1};
    res3.p.b = 0;
    res3.p.n = 1;
    res3.p.dig = {6};
    res3.q.n = 1;
    res3.q.dig = {1};
    res4.p.b = 0;
    res4.p.n = 1;
    res4.p.dig = {0};
    res4.q.n = 1;
    res4.q.dig = {1};
    res.C = {res4,res3,res2,res1};
    std::cout << write_Poly(x) << std::endl;
    std::cout << write_Poly(y) << std::endl;
    std::cout << write_Poly(res) << std::endl;
    std::cout << write_Poly(MUL_PP_P(x, y)) << std::endl;
    DO_CHECK(MUL_PP_P(x, y) == res);

(1)/(1) x^2 + (2)/(1) x^1 + (3)/(1) x^0
(2)/(1) x^1 + (0)/(1) x^0
(2)/(1) x^3 + (4)/(1) x^2 + (6)/(1) x^1 + (0)/(1) x^0
(1)/(1) x^3 + (4)/(1) x^2 + (7)/(1) x^1 + (6)/(1) x^0



x.m = 2;
    a1.p.b = 1;
    a1.p.n = 1;
    a1.p.dig = {2};
    a1.q.n = 1;
    a1.q.dig = {3};
    a2.p.b = 0;
    a2.p.n = 1;
    a2.p.dig = {0};
    a2.q.n = 1;
    a2.q.dig = {1};
    a3.p.b = 0;
    a3.p.n = 1;
    a3.p.dig = {1};
    a3.q.n = 1;
    a3.q.dig = {6};
    x.C = {a3, a2, a1};
    res.m = 2;
    res1.p.b = 1;
    res1.p.n = 1;
    res1.p.dig = {4};
    res1.q.n = 1;
    res1.q.dig = {1};
    res2.p.b = 0;
    res2.p.n = 1;
    res2.p.dig = {0};
    res2.q.n = 1;
    res2.q.dig = {1};
    res3.p.b = 0;
    res3.p.n = 1;
    res3.p.dig = {1};
    res3.q.n = 1;
    res3.q.dig = {1};
    res.C = {res3,res2,res1};
    std::cout << write_Poly(x) << std::endl;
    std::cout << write_Poly(res) << std::endl;
    std::cout << write_Poly(FAC_P_Q(x)) << std::endl;
    DO_CHECK(FAC_P_Q(x) == res); 

//виснет

(-2)/(3) x^2 + (0)/(1) x^1 + (1)/(6) x^0
(-4)/(1) x^2 + (0)/(1) x^1 + (1)/(1) x^0